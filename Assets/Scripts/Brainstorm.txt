Brainstorm
==========

-----------------------------
Project debrief
------------------------------
I hope you see the effort I put into this project
• Passion, determination and drive
• At least 9000 minutes or 150 hours put into this
• Object pooling to reduce garbage collection
• AI tick system that ticks at a lower FPS to reduce CPU usage
• Basically had to learn AR on the fly
• Menu systems completed
• All AR criteria met: detect surface, place game, rotate, zoom

Techniques I used
• Patterns:
	• Use of singletons. I used it on the game controller initially but it caused issue when going back to normal mode from Ar mode. Thankfully it was easy to de-singleton them thanks to the way I wrote my code
• Object Pooling:
	• Use of object pool to basically eliminate garbage collection
	• Because of the implementation I can very easily implement efficient particle systems into it as well
• Augmented Reality
	I basically was a beginner with this technology and had to learn it from scratch. It took 2-3 days for me to get used to it.
	I modeled my game's implementation after Stack and Angry birds, hopefully it looks nice
• Optimizations
	• Always cache objects at startup as much as I can to save CPU
• Coding practices
	• Used expression body methods where it made sense so the code looks cleaner
	• Lambda expressions where it made sense
	• Properties where required
	• Extension functions. I know and can do them
	• Extensive use of events to decouple objects. I use unity events because they can also show up in the inspector
	• I try to write self commenting code where appropriate
	• I try to write clean, clear and organized code that's easy to understand, not just for myself but for others as well
• GameController:
	• Maybe I should've used an array or list to hold the teams in the gameController, but that might complicate things in other ways
	• I calculated each teams attacking direction in case the playing field had to be rotated, which it did
• AI:
	• I used coroutines and repeating invokes to create a separate loop to tick the AI systems separately and at a refresh rate to reduce the CPU usage
	• Basic AI system was just based on a simple states based on enums and running on the tick system, as that was really all that was needed. I wanted to use my own behaviour tree editor but I hadn't used it in a while and would have to relearn how to use it again
	• Used unity engine's navmesh system and navmesh components for the maze system
• Fields:
	• have functions that let you know if a point is located on them, and also a return a random point on them. This came in quite handy when spawning
• Stadium:
	• The stadium had functionality to generate a maze. It shouldn't have been a singleton but I was in a rush
• Maze:
	I was in a rush so I used somebody else's maze code. However it wasn't without trouble and was very problematic at the start. I had to somehow try to make it work correctly and fit onto the field properly. This was very buggy. But it works ok most of the time. I will have to go back and fix it sometime
• Architecture
	• Used SendMessage to relay OnTrigger messages up thru the object. Allows me to put a completely separate and uncoupled object downstream, relieving stress on the parent objects upstream
	• OOP: Made Walls, Goals and Units inherited from TeamObjects as they shared some similar properties
• Input
	• Just used the default old input system as the new one I'm not familiar with and also I think it's still in preview or beta in this version of unity
	• Used a separate help class to register and deregister from the main Input controller/relay
• Scriptable Objects
	• Used it to hold game settings
	• Was planning to create SO variables to hold values shared between systems such as Team stats, strategies etc. But didn't feel the need or had the time to do it.
	• I am very much capable of doing it though :P
• UI and menu systems
	• Used sliders for the gauges as they had inbuilt integer mode
	• Menu systems can be quite difficult to implement properly, especially with nested prefabs. The Main and AR scenes had slightly different hookups
• Tweening
	• Used DoTween as it's great, easy to use and performant
	• I can write my own tweening library sure, but its better to use existing technology that is tried and true
	• Ball passing looks surprisingly great
• Touch
	• Used LeanTween as I had it on hand
	• I could've implemented it myself but again why try to reinvent the wheel when someone has already done it and done it well
• Team:
	• Had convenient functions to handle the common team running task such as spawning units and pointer locations or randomly, controlling the lifecycle of the units, finding good locations for defense
	• Colors the entire team
	• Held team stats, stances as that made the most sense
• Unit:
	• Used an established animated character
	• The most complicated object prefab
	• AI system simple and relatively easy to work with

• Known bugs:
	• Switching back from AR mode to normal mode reloads the Main scene causing an extra MainMenu object to be generated. I have tried resolving this by trying to make it self delete but it always seems to delete the wrong one. Potential solution is to maybe
	• You can still click to spawn during penalty mode :P An easy fix
	• When pinching to zoom to scale world up, it causes anchoring issues

Bug: if there are two chasers, one will have caught and the other would have not and doesn't hence doesn't get cancelled and will keep trying to chase after an attacker

-----------------
maze generation
--------------
1
1
0. origin must be at 0,0,0
1. build maze
	width=8, height=16
2. scale and move origin
scale, x=-2.5,1,-2.6
position: -1.62, 0, -1.22


--------
Scene setups
-------
All
	EndGameScreen.Button (GameOver)
		onClick = MainMenu.ReloadGameScene()
AR
	GameController
		isARMode = true
	ARGamePlace
		gameAssembly = the main world gameplay object ie. "--- World"

--------
Intro
--------
Just let the game run by itself while a cinemachine camera flies around the stadium at medium distance while focusing on the ball


--------
End Match
--------
On Win / Lose
	Display screen showing who won
		"Team one WINS!"
		"Team one LOSES!"
	Stats
		Wins / losses
		Draws
		Passes
		Despawns
		etc
	Display MainMenu
		Button: AR Toggle
		Button: Sound
		Button: Info?

On Draw
	Display screen showing it's a draw
	and that you need to play a penalty match
		Text; the match was draw!
		Button: Play penalty match!
			=> GameController.BeginPenaltyMatch()

GameController.OnEndPenaltyMatch((Team, Result))
	Display penalty result screen
		You won

on game over
	"Game Over!"


----------
What does GameController.isPlaying control?
----------
GameController.Update()
GameController.TickTeams()
Unit.Update()
Unit.Tick()
In other words it controls the team and unit logic and AI

-----------
AR Mode
----------
? How will switching work?
! MainMenu.TapToStart blocks input
!

Tap the AR mode toggle button on the home screen
	Load AR scene
		temporarily turn off main menu tap to start sensor
		Scan for a suitable plane
			If one is found, hover the stadium over
			else hide it 1000m above
		ARCanvas.TapSensor > tap to place the stadium down
		Set flat that assembly has been placed

		Turn on main menu tap to start detector
	Resume as normal

Switching back to normal mode
	No changes to main menu
	There must not be any duplicate main menus! hopefully the singleon code should deal with taht


---------------------------
Tag out sequence
----------------------
Defender touches Attacker
Defender tags Attacker out
	Attacker passes ball to nearest Team mate
		Attacker deactivates
		Attacker passes ball
		Attacker sets nearest team mate to receiver
			Receiver stops and turns and faces the ball

	If no one left then lose round

Defender runs Attacker.TagOut()
	Attacker.PassBall()
		Team.FindNearestActiveUnit()



----------------------------
How to calculate the time required based on distance and speed
---------------------------
Time = Distance / Speed


----------------------
MENU
-----------------------
3 Scenes
	MainMenu
	Main, Maybe MainMenu can be put into Main and made to Dontdestroyonload
	AR

Main Menu
	Title: Ball Battle
	Tap to play
	Sound On/Of
	AR on/off
	About:
		Candidate: Tony le, 0401969981, rlst.github.io
		This project for Gameloft only!

Play Settings
	TeamOne
		Player/CPU
	Player vs CPU
	Player vs Player

End Round Panel

End Match Panel
	Display stats





--------------
Each team has a stance
Each stance causes the units to behave and move differently

I need to somehow combine the stance and behaviour together

Strategy
	Stance
	params

(Stance, params)

Team
	Color	//Does not change
	UserType	//Does not change
	Stance //can change
	Strategy

GameController
	BeginMatch()
		Init all teams to settings

		Teams
			Get goal
			Get fences
			Spawn units
			Set team and colors
			Reset stats
			Despawn units

---------------
Start game sequence
-------------------
• User starts new game
• Controller
	- inits both teams and passes through settings
	- starts match and starts round

Goal
	SetTeam
		Sets team and strategy
		Sets color
	If opponent unit collides
		if unit has ball then score a goal to the opposite team
		else despawn unit

Fences
	Sets team and color
	If opponent team hits then despawn

Team
	inits and colors team objects ie. fences, goals
	X inits and preloads Units
	X units are shoved back into object pool right away?

	Each team handles their own units
		Creates and controls object pools for Units
		Spawns units using pool
		Despawns units





Unit
	Each unit controls itself using AI logic


	SetTeam
		set team, strategy and color

	Spawn
		Conditions:
			user clicks on field
			CPU requests unit to spawn successfully
			there is enough energy
			location is the correct field
		spawn unit at location using object pool (screw preloading)
			if object pool is empty then it will use CreateUnit() to create,
		OnGetUnit() will be run on the unit no matter what

	OnGetUnit(Unit)
		set team
		set spawn time
		Activate()

	Activate()
		Condition:
			inactive < 0
		set team, strategy, color
		set agent radius to normal?

	Deactivate()
		Conditions:
			unit gets caught by opponent while holding the ball
			unit catches an opponent
		set inactive to params.reactivationTime
		set color to grayscale
		set agent radius to 0.1 so that units can pass through?

	Despawn
		Conditions:
			unit hits the opponent's fence
		Gets shoved back into the object pool
			Hide; set active false

	OnRecycleUnit(Unit)
